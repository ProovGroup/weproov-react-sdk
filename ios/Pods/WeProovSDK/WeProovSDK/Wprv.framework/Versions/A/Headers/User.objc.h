// Objective-C API for talking to bitbucket.org/weproov/weproovstrucgo/user Go package.
//   gobind -lang=objc bitbucket.org/weproov/weproovstrucgo/user
//
// File is generated by gobind. Do not edit.

#ifndef __User_H__
#define __User_H__

@import Foundation;
#include "Universe.objc.h"

#include "Cachedimage.objc.h"
#include "Translations.objc.h"

@class UserExtraInfos;
@class UserStruct;
@protocol UserDelegate;
@class UserDelegate;
@protocol UserRecoverDelegate;
@class UserRecoverDelegate;
@protocol UserRefreshDelegate;
@class UserRefreshDelegate;
@protocol UserUploadDelegate;
@class UserUploadDelegate;

@protocol UserDelegate <NSObject>
- (void)onUserError:(NSError*)error;
- (void)onUserSuccess:(UserStruct*)user;
@end

@protocol UserRecoverDelegate <NSObject>
- (void)onRecoverError:(NSError*)err;
- (void)onRecoverSuccess;
@end

@protocol UserRefreshDelegate <NSObject>
- (void)refreshError:(NSError*)err;
- (void)refreshSuccess:(UserStruct*)p0;
- (void)unauthorized;
@end

@protocol UserUploadDelegate <NSObject>
- (void)onUploadError:(NSError*)err;
- (void)onUploadSuccess;
@end

@interface UserExtraInfos : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)name;
- (void)setName:(NSString*)v;
- (NSString*)value;
- (void)setValue:(NSString*)v;
- (NSString*)type;
- (void)setType:(NSString*)v;
- (long)title;
- (void)setTitle:(long)v;
// skipped field ExtraInfos.Title_ with unsupported type: *types.Named

@end

@interface UserStruct : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (long)id_;
- (void)setId:(long)v;
- (NSString*)username;
- (void)setUsername:(NSString*)v;
- (NSString*)email;
- (void)setEmail:(NSString*)v;
- (NSString*)type;
- (void)setType:(NSString*)v;
- (NSString*)firstName;
- (void)setFirstName:(NSString*)v;
- (NSString*)lastName;
- (void)setLastName:(NSString*)v;
- (NSString*)cell;
- (void)setCell:(NSString*)v;
- (NSString*)primaryColor;
- (void)setPrimaryColor:(NSString*)v;
- (NSString*)address;
- (void)setAddress:(NSString*)v;
- (BOOL)emailCertified;
- (void)setEmailCertified:(BOOL)v;
- (BOOL)cellCertified;
- (void)setCellCertified:(BOOL)v;
- (BOOL)enterprise;
- (void)setEnterprise:(BOOL)v;
- (BOOL)admin;
- (void)setAdmin:(BOOL)v;
- (BOOL)generalTemplate;
- (void)setGeneralTemplate:(BOOL)v;
- (BOOL)fleet;
- (void)setFleet:(BOOL)v;
- (long)enterpriseId;
- (void)setEnterpriseId:(long)v;
- (long)picture;
- (void)setPicture:(long)v;
- (long)emailTemplate;
- (void)setEmailTemplate:(long)v;
- (long)imageReport;
- (void)setImageReport:(long)v;
- (NSString*)accessToken;
- (void)setAccessToken:(NSString*)v;
- (NSString*)company;
- (void)setCompany:(NSString*)v;
// skipped field Struct.Extra with unsupported type: *types.Slice

- (NSString*)lang;
- (void)setLang:(NSString*)v;
// skipped field Struct.CreatedAt with unsupported type: *types.Named

// skipped field Struct.UpdatedAt with unsupported type: *types.Named

- (void)changePassword:(NSString*)oldPassword newPassword:(NSString*)newPassword delegate:(id<UserDelegate>)delegate;
- (void)downloadProfilPicture:(id<CachedimageDelegate>)delegate;
/**
 * 	Permet de recuperer le nom concatener du prenom
 */
- (NSString*)getFullName;
/**
 * 	Recupere l'id representant les proprietaire
	si l'utilisateur fait partie d'une entreprise le owner == user.EnterpriseId
	sinon le owner == user.Id
 */
- (long)getOwner;
/**
 * 	Verifie si l'utilisateur et logger
 */
- (BOOL)isLogged;
- (BOOL)isMaster;
/**
 * 	Verifie que l'utilisateur est un utilisateur premium
 */
- (BOOL)isPremium;
/**
 * 	Lis une JSON string pour en extraire l'utilisateur
 */
- (BOOL)loadFromString:(NSString*)value;
- (void)refresh:(id<UserRefreshDelegate>)delegate;
/**
 * 	recharge le profile d'un utilisateur
	a partir de l'api
 */
- (BOOL)refreshSync:(BOOL*)ret0_ error:(NSError**)error;
/**
 * 	Sauvegarde les champs editable en les envoyans dans l'api
 */
- (void)save:(id<UserDelegate>)delegate;
/**
 * 	Sauvgarde dans la bdd sur le device l'utilisateur
 */
- (void)saveLocal;
/**
 * 	Sauvegarde les champs editable en les envoyans dans l'api
 */
- (BOOL)saveSync:(NSError**)error;
- (void)testPin:(NSString*)pin delegate:(id<UserDelegate>)delegate;
/**
 * 	Envoye le code re√ßue par sms pour le verifier sur l'api
	si la reponce est 200 le telephone est valider
 */
- (BOOL)testPinSync:(NSString*)pin error:(NSError**)error;
- (NSString*)toJson:(NSError**)error;
/**
 * 	Met a jour le telephone sur l'api et declanche un sms
	Cette fonction fait juste appele UpdateCellSync a partir d'une goroutine
 */
- (void)updateCell:(NSString*)cell delegate:(id<UserDelegate>)delegate;
/**
 * 	Met a jour le telephone sur l'api et declanche un sms
 */
- (BOOL)updateCellSync:(NSString*)cell error:(NSError**)error;
@end

@interface User : NSObject
// skipped variable CurrentUser with unsupported type: *types.Named

@end

FOUNDATION_EXPORT void UserClearCache(void);

FOUNDATION_EXPORT UserStruct* UserFromJson(NSString* js, NSError** error);

/**
 * 	Permet de recuperer l'utilisateur courant
 */
FOUNDATION_EXPORT UserStruct* UserGetCurrent(void);

/**
 * 	Log l'utilisateur grace a son duo email + password
	cette fonction est juste un envoy en goroutine de UserLoginLocalSync
 */
FOUNDATION_EXPORT void UserLoginLocal(NSString* identifier, NSString* password, id<UserDelegate> delegate);

/**
 * 	Log l'utilisateur grace a son email + password.
	un check de l'email et du mot de passe est efectuer
 */
FOUNDATION_EXPORT UserStruct* UserLoginLocalSync(NSString* identifier, NSString* password, NSError** error);

/**
 * 	Log l'utilisateur grace a son duo token + secret
 */
FOUNDATION_EXPORT void UserLoginOauth(NSString* token, NSString* secret, id<UserDelegate> delegate);

/**
 * 	Log l'utilisateur grace a son token + secret.
 */
FOUNDATION_EXPORT UserStruct* UserLoginOauthSync(NSString* token, NSString* secret, NSError** error);

/**
 * 	Logout permet de suprimer tout les variable local qui represente l'utilisateur
 */
FOUNDATION_EXPORT void UserLogout(void);

FOUNDATION_EXPORT void UserRecoverPassword(NSString* email, id<UserRecoverDelegate> delegate);

/**
 * 	Envoy la demande de recuperation de password
 */
FOUNDATION_EXPORT BOOL UserRecoverPasswordSync(NSString* email, NSError** error);

/**
 * 	Permet d'enregistrer un nouvelle utilisateur
	cette fonction permet de faire passer en asynchrone
 */
FOUNDATION_EXPORT void UserRegisterNew(NSString* identifier, NSString* password, id<UserDelegate> delegate);

// skipped function RegisterNewSync with unsupported parameter or return types


/**
 * 	Permet d'enregistrer un nouvelle utilisateur
	cette fonction permet de faire passer en asynchrone avec un proovcode
 */
FOUNDATION_EXPORT void UserRegisterNewWithProovCode(NSString* identifier, NSString* password, NSString* proovcode, id<UserDelegate> delegate);

/**
 * 	Lancer a l'initialisation
	permet de recuperer le dernier profile rentrer
 */
FOUNDATION_EXPORT BOOL UserReloadFormCache(void);

FOUNDATION_EXPORT void UserSendNotificationToken(void);

FOUNDATION_EXPORT void UserUploadProfilPicture(NSData* data, id<UserUploadDelegate> delegate);

FOUNDATION_EXPORT BOOL UserUploadProfilPictureSync(NSString* data, NSError** error);

@class UserDelegate;

@class UserRecoverDelegate;

@class UserRefreshDelegate;

@class UserUploadDelegate;

/**
 * 	le Delegate represente les reponce possible lors

	l'enregistrement / login / test pin sms
 */
@interface UserDelegate : NSObject <goSeqRefInterface, UserDelegate> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onUserError:(NSError*)error;
- (void)onUserSuccess:(UserStruct*)user;
@end

@interface UserRecoverDelegate : NSObject <goSeqRefInterface, UserRecoverDelegate> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onRecoverError:(NSError*)err;
- (void)onRecoverSuccess;
@end

@interface UserRefreshDelegate : NSObject <goSeqRefInterface, UserRefreshDelegate> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)refreshError:(NSError*)err;
- (void)refreshSuccess:(UserStruct*)p0;
- (void)unauthorized;
@end

@interface UserUploadDelegate : NSObject <goSeqRefInterface, UserUploadDelegate> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onUploadError:(NSError*)err;
- (void)onUploadSuccess;
@end

#endif
